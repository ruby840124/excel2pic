{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","initStage","state","canvasWidth","canvasHeight","stage","Konva","Stage","x","y","container","width","height","setState","addBox","i","excelTitleData","layer","Layer","box","Group","Zindex","fill","stroke","strokeWidth","draggable","add","Rect","Text","text","fontSize","fontFamily","padding","align","on","document","body","style","cursor","download","a","createElement","event","MouseEvent","href","toDataURL","pixelRatio","dispatchEvent","handleImageChange","e","reader","FileReader","file","target","files","onloadend","img","window","Image","onload","checkImageSize","src","result","imageUrl","readAsDataURL","imgWidth","imgHeight","uploadBgBlock","getElementById","bgBlockWidth","offsetWidth","bgBlockHeight","offsetHeight","size","destroyChildren","bg","image","batchDraw","length","getExcelTitle","data","titleArray","key","push","updateExcelData","onImportExcel","fileReader","index","name","validExts","fileExt","Error","fileExtlastof","substring","lastIndexOf","indexOf","toString","workbook","XLSX","read","type","sheet","Sheets","hasOwnProperty","concat","utils","sheet_to_json","excelData","alert","readAsBinaryString","this","className","id","onChange","accept","InputFiles","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a8ca2092.chunk.js","sourcesContent":["import React from 'react';\nimport XLSX from \"xlsx\";\nimport InputFiles from \"react-input-files\";\nimport Konva from 'konva';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state ={\n      image: null,\n      imageUrl: '',\n      stage: null, \n      canvasWidth: 250, \n      canvasHeight: 250, \n      excelData: [],\n      excelTitleData: []\n    };\n  }\n\n  componentDidMount(){\n    this.initStage();\n  }\n\n  initStage = () => {\n    const {canvasWidth, canvasHeight} = this.state;\n    const stage = new Konva.Stage({\n      x:0,\n      y:0,\n      container: 'container',\n      width: canvasWidth,\n      height: canvasHeight,\n    });\n    this.setState({stage: stage});\n  }\n\n  addBox = (stage, i, excelTitleData) => {\n    const {canvasWidth} = this.state;\n    const layer = new Konva.Layer();\n    const box = new Konva.Group({\n        Zindex: 10,\n        x: canvasWidth / 2 - 50,\n        y: 10 + i*40,\n        width: 100,\n        height: 25,\n        fill: '#00D2FF',\n        stroke: 'black',\n        strokeWidth: 4,\n        draggable: true,\n    });\n\n    box.add(new Konva.Rect({\n      width: 100,\n      height: 25,\n      fill: 'lightblue'\n    }));\n\n    box.add(new Konva.Text({\n      text: excelTitleData[i],\n      fontSize: 18,\n      fontFamily: 'Calibri',\n      fill: '#000',\n      width: 100,\n      padding: 5,\n      align: 'center'\n    }));\n\n    box.on('mouseover', function () {\n        document.body.style.cursor = 'pointer';\n    });\n\n    box.on('mouseout', function () {\n        document.body.style.cursor = 'default';\n    });\n\n    layer.add(box);\n    stage.add(layer);\n    this.setState({stage: stage});\n  }\n\n  download = () => {\n    const {stage} = this.state;\n    const a = document.createElement('a');\n    const event = new MouseEvent('click');\n    a.download = 'test.jpg';\n    a.href = stage.toDataURL({ pixelRatio: 1 });\n    a.dispatchEvent(event);\n  }\n\n  handleImageChange = (e) => {\n    let reader = new FileReader();\n    let file = e.target.files[0];\n\n    reader.onloadend = () => {\n        const img = new window.Image();\n        img.onload = () => {\n          this.checkImageSize(img.width, img.height, img);\n        }\n        img.src = reader.result;\n        this.setState({imageUrl: reader.result});\n    }\n    reader.readAsDataURL(file);\n  }\n\n  checkImageSize = (imgWidth, imgHeight, img) => {\n    const {stage, excelTitleData} = this.state;\n    const uploadBgBlock = document.getElementById(\"uploadBgBlock\");\n    const bgBlockWidth = uploadBgBlock.offsetWidth;\n    const bgBlockHeight = uploadBgBlock.offsetHeight;\n    const layer = new Konva.Layer();\n    let size = 0.2;\n\n    stage.destroyChildren();\n\n    while(bgBlockWidth < imgWidth || bgBlockHeight < imgHeight){\n      imgHeight  = imgHeight / size;\n      imgWidth  = imgWidth / size;\n      size = size + 0.2;\n    }\n\n    const bg = new Konva.Image({\n      x: 0,\n      y: 0,\n      image: img,\n      width: imgWidth,\n      height: imgHeight,\n    });\n    layer.add(bg);\n    layer.batchDraw();\n    stage.width(imgWidth);\n    stage.height(imgHeight);\n    stage.add(layer);\n\n    if(excelTitleData){\n      for (let i = 0; i < excelTitleData.length; i++){\n        this.addBox(stage, i, excelTitleData);\n      }\n    }\n    this.setState({canvasWidth: imgWidth, canvasHeight: imgHeight});\n  }\n\n  getExcelTitle = (data) => {\n    let titleArray = [];\n    for (var key in data[0])\n        titleArray.push(key);\n    this.updateExcelData(titleArray);\n    this.setState({excelTitleData: titleArray});\n  }\n\n  updateExcelData = (excelTitleData) => {\n    const {stage, imageUrl, canvasWidth, canvasHeight} = this.state;\n\n    if(imageUrl){\n      const layer = new Konva.Layer();\n      const bg = new Konva.Image({\n        x: 0,\n        y: 0,\n        image: imageUrl,\n        width: canvasWidth,\n        height: canvasHeight,\n      });\n      layer.add(bg);\n      layer.batchDraw();\n      stage.add(layer);\n    }\n\n    for (let i = 0; i < excelTitleData.length; i++){\n      this.addBox(stage, i, excelTitleData);\n    }\n  }\n\n  onImportExcel = files => {\n    const fileReader = new FileReader();\n    for (let index = 0; index < files.length; index++) {\n        fileReader.name = files[index].name;\n    }\n    fileReader.onload = event => {\n        try {\n            const validExts = [\".xlsx\", \".xls\"];\n            const fileExt = event.target.name;\n\n            if (fileExt === null)\n              throw new Error(\"excel檔案沒有任何資料\");\n\n            const fileExtlastof = fileExt.substring(fileExt.lastIndexOf(\".\"));\n            if (validExts.indexOf(fileExtlastof) === -1) \n              throw new Error(\"檔案類型錯誤，只可接受：\" + validExts.toString() + \"檔案名稱\");\n\n            const { result } = event.target;\n            const workbook = XLSX.read(result, { type: \"binary\" });\n            let data = []; \n            for (const sheet in workbook.Sheets) {\n                if (workbook.Sheets.hasOwnProperty(sheet)) {\n                    data = data.concat(\n                        XLSX.utils.sheet_to_json(workbook.Sheets[sheet])\n                    );\n                }\n            }\n            this.getExcelTitle(data);\n            this.setState({excelData: data});\n        } catch (e) {\n            alert(e);\n            return;\n        }\n    };\n    fileReader.readAsBinaryString(files[0]);\n};\n\n  download = () =>{\n    const {stage} = this.state;\n    const a = document.createElement('a');\n    const event = new MouseEvent('click');\n    a.download = 'test.jpg';\n    a.href = stage.toDataURL();\n    a.dispatchEvent(event);\n  }\n\n  render() {\n    const {canvasWidth, canvasHeight} = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"topBlock\">\n          <div className=\"topText\">excel2picture demo</div>\n        </div>\n        <div className=\"cotentBlock\">\n          <div className=\"uploadBlock\">\n            <div className=\"uploadBgBlock\" id=\"uploadBgBlock\">\n              <input type=\"file\" onChange={this.handleImageChange} accept=\"image/*\" />\n              <div className=\"container\" id=\"container\" style={{width: canvasWidth, height: canvasHeight}}></div>\n            </div>\n            <div className=\"uploadExcelBlock\">\n              <InputFiles accept=\".xlsx, .xls\" onChange={this.onImportExcel}>\n                <button className=\"btn btn-primary\">上傳excel資料</button>\n              </InputFiles>\n            </div>\n          </div>\n          <button className=\"readyButton\" onClick={this.download}>開始生成圖片</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}