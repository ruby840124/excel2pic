{"version":3,"sources":["PreviewImg.jsx","App.js","index.js"],"names":["initialState","PreviewImg","props","initStage","canvasWidth","canvasHeight","stage","Konva","Stage","x","y","container","width","height","setState","updateBgImg","bgImg","state","layer","Layer","bg","Image","image","add","batchDraw","this","prevProps","className","id","style","React","Component","App","initCanvas","uploadBg","document","getElementById","uploadBgOfWidth","offsetWidth","uploadBgOfHeight","offsetHeight","size","lastUploadBgOfWidth","lastUploadBgOfHeight","updateCanvas","ratio","onImportExcel","files","fileReader","FileReader","index","length","name","onload","event","validExts","fileExt","target","fileExtlastof","substring","lastIndexOf","indexOf","Error","toString","result","workbook","XLSX","read","type","data","sheet","Sheets","hasOwnProperty","concat","utils","sheet_to_json","excelHint","getExcelTitle","e","alert","readAsBinaryString","titleArray","key","push","console","log","excelData","excelTitleData","handleImageChange","reader","file","onloadend","img","window","bgImgHint","src","readAsDataURL","changeRatio","value","download","a","createElement","MouseEvent","href","toDataURL","dispatchEvent","updatePreviewImg","addEventListener","removeEventListener","marginTop","fontFamily","Accordion","defaultActiveKey","Card","Toggle","as","Header","fontWeight","color","eventKey","Collapse","Body","onChange","defaultValue","InputFiles","accept","marginBottom","display","Button","variant","onClick","ReactDOM","render"],"mappings":"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","file":"static/js/main.3b11906c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Konva from 'konva';\r\nimport './App.css';\r\n\r\nconst initialState = {\r\n\r\n};\r\n\r\nclass PreviewImg extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initStage();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n\r\n  }\r\n\r\n  componentDidUpdate(prevProps){\r\n    if(this.props.bgImg !== prevProps.bgImg){\r\n      this.updateBgImg();\r\n    }\r\n  }\r\n\r\n  initStage = () => {\r\n    const {canvasWidth, canvasHeight} = this.props;\r\n    const stage = new Konva.Stage({\r\n      x:0,\r\n      y:0,\r\n      container: 'container',\r\n      width: canvasWidth,\r\n      height: canvasHeight,\r\n    });\r\n    this.setState({stage: stage});\r\n  }\r\n\r\n  updateBgImg = () => {\r\n    const {bgImg, canvasWidth, canvasHeight} = this.props;\r\n    const {stage} = this.state;\r\n    const layer = new Konva.Layer();\r\n    const bg = new Konva.Image({\r\n      x: 0,\r\n      y: 0,\r\n      image: bgImg,\r\n      width: canvasWidth,\r\n      height: canvasHeight,\r\n    });\r\n    layer.add(bg);\r\n    layer.batchDraw();\r\n    stage.width(canvasWidth);\r\n    stage.height(canvasHeight);\r\n    stage.add(layer);\r\n  }\r\n\r\n  /*addBox = (stage, i, excelTitleData) => {\r\n    const {canvasWidth} = this.state;\r\n    const layer = new Konva.Layer();\r\n    const box = new Konva.Group({\r\n        Zindex: 10,\r\n        x: canvasWidth / 2 - 50,\r\n        y: 10 + i*40,\r\n        width: 100,\r\n        height: 25,\r\n        fill: '#00D2FF',\r\n        stroke: 'black',\r\n        strokeWidth: 4,\r\n        draggable: true,\r\n    });\r\n\r\n    box.add(new Konva.Rect({\r\n      width: 100,\r\n      height: 25,\r\n      fill: 'lightblue'\r\n    }));\r\n\r\n    box.add(new Konva.Text({\r\n      text: excelTitleData[i],\r\n      fontSize: 18,\r\n      fontFamily: 'Calibri',\r\n      fill: '#000',\r\n      width: 100,\r\n      padding: 5,\r\n      align: 'center'\r\n    }));\r\n\r\n    box.on('mouseover', function () {\r\n        document.body.style.cursor = 'pointer';\r\n    });\r\n\r\n    box.on('mouseout', function () {\r\n        document.body.style.cursor = 'default';\r\n    });\r\n\r\n    layer.add(box);\r\n    stage.add(layer);\r\n    this.setState({stage: stage});\r\n  }\r\n\r\n  download = () => {\r\n    const {stage} = this.state;\r\n    const a = document.createElement('a');\r\n    const event = new MouseEvent('click');\r\n    a.download = 'test.jpg';\r\n    a.href = stage.toDataURL({ pixelRatio: 1 });\r\n    a.dispatchEvent(event);\r\n  }\r\n\r\n  handleImageChange = (e) => {\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n\r\n    reader.onloadend = () => {\r\n        const img = new window.Image();\r\n        img.onload = () => {\r\n          this.checkImageSize(img.width, img.height, img);\r\n        }\r\n        img.src = reader.result;\r\n        this.setState({imageUrl: reader.result});\r\n    }\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  checkImageSize = (imgWidth, imgHeight, img) => {\r\n    const {stage, excelTitleData} = this.state;\r\n    const uploadBgBlock = document.getElementById(\"uploadBgBlock\");\r\n    const bgBlockWidth = uploadBgBlock.offsetWidth;\r\n    const bgBlockHeight = uploadBgBlock.offsetHeight;\r\n    const layer = new Konva.Layer();\r\n    let size = 0.2;\r\n\r\n    stage.destroyChildren();\r\n\r\n    while(bgBlockWidth < imgWidth || bgBlockHeight < imgHeight){\r\n      imgHeight  = imgHeight / size;\r\n      imgWidth  = imgWidth / size;\r\n      size = size + 0.2;\r\n    }\r\n\r\n    const bg = new Konva.Image({\r\n      x: 0,\r\n      y: 0,\r\n      image: img,\r\n      width: imgWidth,\r\n      height: imgHeight,\r\n    });\r\n    layer.add(bg);\r\n    layer.batchDraw();\r\n    stage.width(imgWidth);\r\n    stage.height(imgHeight);\r\n    stage.add(layer);\r\n\r\n    if(excelTitleData){\r\n      for (let i = 0; i < excelTitleData.length; i++){\r\n        this.addBox(stage, i, excelTitleData);\r\n      }\r\n    }\r\n    this.setState({canvasWidth: imgWidth, canvasHeight: imgHeight});\r\n  }\r\n\r\n  getExcelTitle = (data) => {\r\n    let titleArray = [];\r\n    for (var key in data[0])\r\n        titleArray.push(key);\r\n    this.updateExcelData(titleArray);\r\n    this.setState({excelTitleData: titleArray});\r\n  }\r\n\r\n  updateExcelData = (excelTitleData) => {\r\n    const {stage, imageUrl, canvasWidth, canvasHeight} = this.state;\r\n\r\n    if(imageUrl){\r\n      const layer = new Konva.Layer();\r\n      const bg = new Konva.Image({\r\n        x: 0,\r\n        y: 0,\r\n        image: imageUrl,\r\n        width: canvasWidth,\r\n        height: canvasHeight,\r\n      });\r\n      layer.add(bg);\r\n      layer.batchDraw();\r\n      stage.add(layer);\r\n    }\r\n\r\n    for (let i = 0; i < excelTitleData.length; i++){\r\n      this.addBox(stage, i, excelTitleData);\r\n    }\r\n  }*/\r\n\r\n  render() {\r\n      const {canvasHeight, canvasWidth} = this.props;\r\n    return (\r\n        <div className=\"container\" id=\"container\" style={{width: canvasWidth, height: canvasHeight}}></div>\r\n    );\r\n  }\r\n}\r\nexport default PreviewImg;","import React from 'react';\nimport XLSX from \"xlsx\";\nimport { Accordion, Card, Button } from 'react-bootstrap';\nimport InputFiles from \"react-input-files\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PreviewImg from './PreviewImg';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state ={\n      ratio: 2,\n      canvasWidth: 800, \n      canvasHeight: 600,\n      bgImg: null, \n      excelData: null,\n      excelTitleData: null,\n      excelHint: false,\n      bgImgHint: false,\n      lastUploadBgOfWidth: 1,\n      lastUploadBgOfHeight: 1,\n    };\n  }\n\n  componentDidMount() {\n    this.initCanvas();\n    window.addEventListener('resize', this.updateCanvas);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateCanvas);\n  }\n\n  //初始化canvas大小\n  initCanvas = () => {\n    const uploadBg = document.getElementById(\"uploadBgBlock\");\n    const uploadBgOfWidth = uploadBg.offsetWidth;\n    const uploadBgOfHeight = uploadBg.offsetHeight;\n    let canvasWidth = 800;\n    let canvasHeight = 600;\n    let size = 0.1;\n\n    while(uploadBgOfWidth < canvasWidth || uploadBgOfHeight < canvasHeight){\n      canvasWidth  = canvasWidth / size;\n      canvasHeight  = canvasHeight / size;\n      size = size + 0.1;\n    }\n    this.setState({\n      canvasWidth: canvasWidth, \n      canvasHeight: canvasHeight, \n      lastUploadBgOfWidth: uploadBgOfWidth, \n      lastUploadBgOfHeight: uploadBgOfHeight});\n  }\n\n  //使canvas隨著網頁縮放\n  updateCanvas = () => {\n    const {lastUploadBgOfWidth, lastUploadBgOfHeight, canvasWidth, canvasHeight} = this.state;\n    const uploadBg = document.getElementById(\"uploadBgBlock\");\n    const uploadBgOfWidth = uploadBg.offsetWidth;\n    const uploadBgOfHeight = uploadBg.offsetHeight;\n    let ratio;\n      if(uploadBgOfWidth !== lastUploadBgOfWidth){\n        ratio = uploadBgOfWidth/lastUploadBgOfWidth;\n      }else if(uploadBgOfHeight !== lastUploadBgOfHeight) {\n        ratio = uploadBgOfHeight/lastUploadBgOfHeight;\n      }else {\n        if(uploadBgOfWidth/lastUploadBgOfWidth > uploadBgOfHeight/lastUploadBgOfHeight){\n          ratio = uploadBgOfWidth/lastUploadBgOfWidth;\n        }else{\n          ratio = uploadBgOfHeight/lastUploadBgOfHeight;\n        }\n      }\n      if(canvasWidth*ratio > 800 || canvasHeight*ratio > 600){\n        this.setState({\n          canvasWidth: 800, \n          canvasHeight: 600, \n          lastUploadBgOfWidth: uploadBgOfWidth, \n          lastUploadBgOfHeight: uploadBgOfHeight});\n      }else {\n        this.setState({\n          canvasWidth: canvasWidth*ratio, \n          canvasHeight: canvasHeight*ratio, \n          lastUploadBgOfWidth: uploadBgOfWidth, \n          lastUploadBgOfHeight: uploadBgOfHeight});\n      }\n    }\n\n  //匯入excel檔案\n  onImportExcel = files => {\n    const fileReader = new FileReader();\n    for (let index = 0; index < files.length; index++) {\n        fileReader.name = files[index].name;\n    }\n    fileReader.onload = event => {\n        try {\n            const validExts = [\".xlsx\", \".xls\"];\n            const fileExt = event.target.name;\n\n            const fileExtlastof = fileExt.substring(fileExt.lastIndexOf(\".\"));\n            if (validExts.indexOf(fileExtlastof) === -1) \n              throw new Error(\"檔案類型錯誤，只可接受：\" + validExts.toString() + \"檔案名稱\");\n\n            const { result } = event.target;\n            const workbook = XLSX.read(result, { type: \"binary\" });\n            let data = []; \n            for (const sheet in workbook.Sheets) {\n                if (workbook.Sheets.hasOwnProperty(sheet)) {\n                    data = data.concat(\n                        XLSX.utils.sheet_to_json(workbook.Sheets[sheet])\n                    );\n                }\n            }\n\n            if(data.length === 0) \n              throw new Error(\"excel沒有任何資料\");\n\n            this.setState({excelHint: false});\n            this.getExcelTitle(data);\n        } catch (e) {\n          alert(e);\n          return;\n        }\n    };\n    fileReader.readAsBinaryString(files[0]);\n  };\n\n  //取得excel欄位所有標題\n  getExcelTitle = (data) => {\n    let titleArray = [];\n    for (var key in data[0])\n        titleArray.push(key);\n    console.log(titleArray);\n    this.setState({excelData: data, excelTitleData: titleArray});\n  }\n\n  //匯入圖片檔案\n  handleImageChange = (e) => {\n    let reader = new FileReader();\n    let file = e.target.files[0];\n\n    reader.onloadend = () => {\n        const img = new window.Image();\n        img.onload = () => {\n          this.setState({bgImgHint: false, bgImg: img});\n        }\n        img.src = reader.result;\n    }\n    reader.readAsDataURL(file);\n  }\n\n  changeRatio = () => {\n    const value = document.getElementById(\"bgRatio\").value;\n    if(value === \"small\"){\n      this.setState({ratio: 2.2});\n    }else if(value === \"middle\"){\n      this.setState({ratio: 2});\n    }else if(value === \"big\"){\n      this.setState({ratio: 1.8});\n    }\n  }\n\n  download = () =>{\n    const {stage} = this.state;\n    const a = document.createElement('a');\n    const event = new MouseEvent('click');\n    a.download = 'test.jpg';\n    a.href = stage.toDataURL();\n    a.dispatchEvent(event);\n  }\n\n  updatePreviewImg = () => {\n    const {bgImg, excelData} = this.state;\n    if(!bgImg && !excelData){\n      alert(\"請上傳背景圖&excel檔案\");\n      this.setState({excelHint: true, bgImgHint: true});\n    }else if(!bgImg){\n      alert(\"請上傳背景圖\");\n      this.setState({bgImgHint: true});\n    }else if(!excelData){\n      alert(\"請上傳excel檔案\");\n      this.setState({excelHint: true});\n    }\n  }\n\n  render() {\n    const {canvasWidth, canvasHeight, excelHint, bgImgHint, ratio, bgImg} = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"topBlock\">\n          <div className=\"topText\">excel2picture demo</div>\n        </div>\n        <div className=\"cotentBlock\">\n          <div className=\"uploadBlock\">\n            <div className=\"uploadBgBlock\" id=\"uploadBgBlock\">\n              <div style={{width: \"80%\", marginTop: \"20px\", fontFamily: \"sans-serif\"}}>\n              <Accordion defaultActiveKey=\"0\">\n                <Card>\n                  <Accordion.Toggle as={Card.Header} style={{fontWeight: \"bold\", color: \"#0066CC\"}} eventKey=\"0\">\n                    step 1 : 選擇預覽圖片大小\n                  </Accordion.Toggle>\n                  <Accordion.Collapse eventKey=\"0\">\n                    <Card.Body>\n                        <select id=\"bgRatio\" onChange={this.changeRatio} defaultValue={\"middle\"}>\n                  　        <option value=\"small\">small</option>\n                  　        <option value=\"middle\">middle</option>\n                            <option value=\"big\">big</option>\n                        </select>\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n                <Card>\n                  <Accordion.Toggle as={Card.Header} style={{fontWeight: \"bold\", color: excelHint? \"red\":\"#0066CC\"}} eventKey=\"1\">\n                    step 2 : 上傳excel檔案\n                  </Accordion.Toggle>\n                  <Accordion.Collapse eventKey=\"1\">\n                    <Card.Body>\n                        <InputFiles accept=\".xlsx, .xls\" onChange={this.onImportExcel}>\n                            <button className=\"btn btn-primary\">上傳excel資料</button>\n                        </InputFiles>\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n                <Card>\n                  <Accordion.Toggle as={Card.Header} style={{fontWeight: \"bold\", color: bgImgHint? \"red\":\"#0066CC\"}} eventKey=\"2\">\n                    step 3 : 上傳背景圖片\n                  </Accordion.Toggle>\n                  <Accordion.Collapse eventKey=\"2\">\n                    <Card.Body>\n                    <label className=\"btn btn-primary\" style={{marginBottom: \"0\"}}>\n                        {\"上傳背景圖片\"}\n                        <input type=\"file\" style={{display: \"none\"}} onChange={this.handleImageChange} accept=\"image/*\"/>\n                    </label>\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n              <Button variant=\"info\" style={{width: \"100%\", marginTop: \"10px\"}} onClick={this.updatePreviewImg}>產生預覽結果</Button>{' '}\n              </div>\n              <PreviewImg canvasWidth={canvasWidth/ratio} canvasHeight={canvasHeight/ratio} bgImg={bgImg}/>\n            </div>\n            <div className=\"generateImageBlock\">\n              {\"請先選擇資料及圖片，並預覽結果\"}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}