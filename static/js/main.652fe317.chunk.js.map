{"version":3,"sources":["PreviewImg.jsx","App.js","index.js"],"names":["initialState","PreviewImg","props","initStage","canvasWidth","canvasHeight","stage","Konva","Stage","x","y","container","width","height","setState","state","this","className","id","style","React","Component","App","onImportExcel","files","fileReader","FileReader","index","length","name","onload","event","validExts","fileExt","target","fileExtlastof","substring","lastIndexOf","indexOf","Error","toString","result","workbook","XLSX","read","type","data","sheet","Sheets","hasOwnProperty","concat","utils","sheet_to_json","excelHint","getExcelTitle","e","alert","readAsBinaryString","titleArray","key","push","console","log","excelData","excelTitleData","handleImageChange","reader","file","onloadend","img","window","Image","bgImgHint","src","bgImg","readAsDataURL","changeRatio","value","document","getElementById","ratio","download","a","createElement","MouseEvent","href","toDataURL","dispatchEvent","updatePreviewImg","marginTop","fontFamily","Accordion","defaultActiveKey","Card","Toggle","as","Header","fontWeight","color","eventKey","Collapse","Body","onChange","InputFiles","accept","marginBottom","display","Button","variant","onClick","ReactDOM","render"],"mappings":"mXAGMA,EAAe,GA4KNC,E,kDAvKb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,UAAY,WAAO,IAAD,EACoB,EAAKD,MAAlCE,EADS,EACTA,YAAaC,EADJ,EACIA,aACdC,EAAQ,IAAIC,IAAMC,MAAM,CAC5BC,EAAE,EACFC,EAAE,EACFC,UAAW,YACXC,MAAOR,EACPS,OAAQR,IAEV,EAAKS,SAAS,CAACR,MAAOA,KApBtB,EAAKS,MAAQf,EAFI,E,gEAMjBgB,KAAKb,c,+EA0JG,IAAD,EAC+Ba,KAAKd,MAAlCG,EADF,EACEA,aAAcD,EADhB,EACgBA,YACvB,OACI,qBAAKa,UAAU,YAAYC,GAAG,YAAYC,MAAO,CAACP,MAAOR,EAAaS,OAAQR,GAA9E,qB,GApKiBe,IAAMC,WCsLhBC,G,wDAnLb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAcRqB,cAAgB,SAAAC,GAEd,IADA,IAAMC,EAAa,IAAIC,WACdC,EAAQ,EAAGA,EAAQH,EAAMI,OAAQD,IACtCF,EAAWI,KAAOL,EAAMG,GAAOE,KAEnCJ,EAAWK,OAAS,SAAAC,GAChB,IACI,IAAMC,EAAY,CAAC,QAAS,QACtBC,EAAUF,EAAMG,OAAOL,KAEvBM,EAAgBF,EAAQG,UAAUH,EAAQI,YAAY,MAC5D,IAA0C,IAAtCL,EAAUM,QAAQH,GACpB,MAAM,IAAII,MAAM,2EAAiBP,EAAUQ,WAAa,4BAN1D,IAQQC,EAAWV,EAAMG,OAAjBO,OACFC,EAAWC,IAAKC,KAAKH,EAAQ,CAAEI,KAAM,WACvCC,EAAO,GACX,IAAK,IAAMC,KAASL,EAASM,OACrBN,EAASM,OAAOC,eAAeF,KAC/BD,EAAOA,EAAKI,OACRP,IAAKQ,MAAMC,cAAcV,EAASM,OAAOD,MAKrD,GAAmB,IAAhBD,EAAKlB,OACN,MAAM,IAAIW,MAAM,6CAElB,EAAKzB,SAAS,CAACuC,WAAW,IAC1B,EAAKC,cAAcR,GACrB,MAAOS,GAEP,YADAC,MAAMD,KAIZ9B,EAAWgC,mBAAmBjC,EAAM,KAlDnB,EAsDnB8B,cAAgB,SAACR,GACf,IAAIY,EAAa,GACjB,IAAK,IAAIC,KAAOb,EAAK,GACjBY,EAAWE,KAAKD,GACpBE,QAAQC,IAAIJ,GACZ,EAAK5C,SAAS,CAACiD,UAAWjB,EAAMkB,eAAgBN,KA3D/B,EA+DnBO,kBAAoB,SAACV,GACnB,IAAIW,EAAS,IAAIxC,WACbyC,EAAOZ,EAAErB,OAAOV,MAAM,GAE1B0C,EAAOE,UAAY,WACf,IAAMC,EAAM,IAAIC,OAAOC,MACvBF,EAAIvC,OAAS,WACX,EAAKhB,SAAS,CAAC0D,WAAW,IAC1BX,QAAQC,IAAI,YAEdO,EAAII,IAAMP,EAAOzB,OACjB,EAAK3B,SAAS,CAAC4D,MAAOR,EAAOzB,UAEjCyB,EAAOS,cAAcR,IA5EJ,EA+EnBS,YAAc,WACZ,IAAMC,EAAQC,SAASC,eAAe,WAAWF,MACpC,UAAVA,EACD,EAAK/D,SAAS,CAACkE,MAAO,IACL,WAAVH,EACP,EAAK/D,SAAS,CAACkE,MAAO,MACL,QAAVH,GACP,EAAK/D,SAAS,CAACkE,MAAO,OAtFP,EA0FnBC,SAAW,WAAM,IACR3E,EAAS,EAAKS,MAAdT,MACD4E,EAAIJ,SAASK,cAAc,KAC3BpD,EAAQ,IAAIqD,WAAW,SAC7BF,EAAED,SAAW,WACbC,EAAEG,KAAO/E,EAAMgF,YACfJ,EAAEK,cAAcxD,IAhGC,EAmGnByD,iBAAmB,WAAO,IAAD,EACI,EAAKzE,MAAzB2D,EADgB,EAChBA,MAAOX,EADS,EACTA,UACVW,GAAUX,EAGJW,EAGAX,IACRP,MAAM,uCACN,EAAK1C,SAAS,CAACuC,WAAW,MAJ1BG,MAAM,wCACN,EAAK1C,SAAS,CAAC0D,WAAW,MAJ1BhB,MAAM,0DACN,EAAK1C,SAAS,CAACuC,WAAW,EAAMmB,WAAW,MArG7C,EAAKzD,MAAO,CACViE,MAAO,EACP5E,YAAa,IACbC,aAAc,IACdqE,MAAO,KACPX,UAAW,KACXC,eAAgB,KAChBX,WAAW,EACXmB,WAAW,GAVI,E,qDAiHT,IAAD,EAC0DxD,KAAKD,MAA/DX,EADA,EACAA,YAAaC,EADb,EACaA,aAAcgD,EAD3B,EAC2BA,UAAWmB,EADtC,EACsCA,UAAWQ,EADjD,EACiDA,MACxD,OACE,sBAAK/D,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKA,UAAU,UAAf,kCAEF,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,gBAAgBC,GAAG,gBAAlC,UACE,sBAAKC,MAAO,CAACP,MAAO,MAAO6E,UAAW,OAAQC,WAAY,cAA1D,UACA,eAACC,EAAA,EAAD,CAAWC,iBAAiB,IAA5B,UACE,eAACC,EAAA,EAAD,WACE,cAACF,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKG,OAAQ7E,MAAO,CAAC8E,WAAY,OAAQC,MAAO,WAAYC,SAAS,IAA3F,uEAGA,cAACR,EAAA,EAAUS,SAAX,CAAoBD,SAAS,IAA7B,SACE,cAACN,EAAA,EAAKQ,KAAN,UACI,yBAAQnF,GAAG,UAAUoF,SAAUtF,KAAK4D,YAApC,2BACG,wBAAQC,MAAM,QAAd,mBADH,iBAEG,wBAAQA,MAAM,SAAd,oBACC,wBAAQA,MAAM,MAAd,2BAKZ,eAACgB,EAAA,EAAD,WACE,cAACF,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKG,OAAQ7E,MAAO,CAAC8E,WAAY,OAAQC,MAAO7C,EAAW,MAAM,WAAY8C,SAAS,IAA5G,oDAGA,cAACR,EAAA,EAAUS,SAAX,CAAoBD,SAAS,IAA7B,SACE,cAACN,EAAA,EAAKQ,KAAN,UACI,cAACE,EAAA,EAAD,CAAYC,OAAO,cAAcF,SAAUtF,KAAKO,cAAhD,SACI,wBAAQN,UAAU,kBAAlB,oDAKZ,eAAC4E,EAAA,EAAD,WACE,cAACF,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKG,OAAQ7E,MAAO,CAAC8E,WAAY,OAAQC,MAAO1B,EAAW,MAAM,WAAY2B,SAAS,IAA5G,2DAGA,cAACR,EAAA,EAAUS,SAAX,CAAoBD,SAAS,IAA7B,SACE,cAACN,EAAA,EAAKQ,KAAN,UACA,wBAAOpF,UAAU,kBAAkBE,MAAO,CAACsF,aAAc,KAAzD,UACK,uCACD,uBAAO5D,KAAK,OAAO1B,MAAO,CAACuF,QAAS,QAASJ,SAAUtF,KAAKiD,kBAAmBuC,OAAO,yBAMhG,cAACG,EAAA,EAAD,CAAQC,QAAQ,OAAOzF,MAAO,CAACP,MAAO,OAAQ6E,UAAW,QAASoB,QAAS7F,KAAKwE,iBAAhF,kDAAkH,OAElH,cAAC,EAAD,CAAYpF,YAAaA,EAAY4E,EAAO3E,aAAcA,EAAa2E,OAEzE,qBAAK/D,UAAU,qBAAf,SACG,2G,GA3KGG,IAAMC,YCHxByF,IAASC,OAAO,cAAC,EAAD,IAASjC,SAASC,eAAe,W","file":"static/js/main.652fe317.chunk.js","sourcesContent":["import React from 'react';\r\nimport Konva from 'konva';\r\n\r\nconst initialState = {\r\n\r\n};\r\n\r\nclass PreviewImg extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initStage();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n\r\n  }\r\n\r\n  initStage = () => {\r\n    const {canvasWidth, canvasHeight} = this.props;\r\n    const stage = new Konva.Stage({\r\n      x:0,\r\n      y:0,\r\n      container: 'container',\r\n      width: canvasWidth,\r\n      height: canvasHeight,\r\n    });\r\n    this.setState({stage: stage});\r\n  }\r\n\r\n  /*addBox = (stage, i, excelTitleData) => {\r\n    const {canvasWidth} = this.state;\r\n    const layer = new Konva.Layer();\r\n    const box = new Konva.Group({\r\n        Zindex: 10,\r\n        x: canvasWidth / 2 - 50,\r\n        y: 10 + i*40,\r\n        width: 100,\r\n        height: 25,\r\n        fill: '#00D2FF',\r\n        stroke: 'black',\r\n        strokeWidth: 4,\r\n        draggable: true,\r\n    });\r\n\r\n    box.add(new Konva.Rect({\r\n      width: 100,\r\n      height: 25,\r\n      fill: 'lightblue'\r\n    }));\r\n\r\n    box.add(new Konva.Text({\r\n      text: excelTitleData[i],\r\n      fontSize: 18,\r\n      fontFamily: 'Calibri',\r\n      fill: '#000',\r\n      width: 100,\r\n      padding: 5,\r\n      align: 'center'\r\n    }));\r\n\r\n    box.on('mouseover', function () {\r\n        document.body.style.cursor = 'pointer';\r\n    });\r\n\r\n    box.on('mouseout', function () {\r\n        document.body.style.cursor = 'default';\r\n    });\r\n\r\n    layer.add(box);\r\n    stage.add(layer);\r\n    this.setState({stage: stage});\r\n  }\r\n\r\n  download = () => {\r\n    const {stage} = this.state;\r\n    const a = document.createElement('a');\r\n    const event = new MouseEvent('click');\r\n    a.download = 'test.jpg';\r\n    a.href = stage.toDataURL({ pixelRatio: 1 });\r\n    a.dispatchEvent(event);\r\n  }\r\n\r\n  handleImageChange = (e) => {\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n\r\n    reader.onloadend = () => {\r\n        const img = new window.Image();\r\n        img.onload = () => {\r\n          this.checkImageSize(img.width, img.height, img);\r\n        }\r\n        img.src = reader.result;\r\n        this.setState({imageUrl: reader.result});\r\n    }\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  checkImageSize = (imgWidth, imgHeight, img) => {\r\n    const {stage, excelTitleData} = this.state;\r\n    const uploadBgBlock = document.getElementById(\"uploadBgBlock\");\r\n    const bgBlockWidth = uploadBgBlock.offsetWidth;\r\n    const bgBlockHeight = uploadBgBlock.offsetHeight;\r\n    const layer = new Konva.Layer();\r\n    let size = 0.2;\r\n\r\n    stage.destroyChildren();\r\n\r\n    while(bgBlockWidth < imgWidth || bgBlockHeight < imgHeight){\r\n      imgHeight  = imgHeight / size;\r\n      imgWidth  = imgWidth / size;\r\n      size = size + 0.2;\r\n    }\r\n\r\n    const bg = new Konva.Image({\r\n      x: 0,\r\n      y: 0,\r\n      image: img,\r\n      width: imgWidth,\r\n      height: imgHeight,\r\n    });\r\n    layer.add(bg);\r\n    layer.batchDraw();\r\n    stage.width(imgWidth);\r\n    stage.height(imgHeight);\r\n    stage.add(layer);\r\n\r\n    if(excelTitleData){\r\n      for (let i = 0; i < excelTitleData.length; i++){\r\n        this.addBox(stage, i, excelTitleData);\r\n      }\r\n    }\r\n    this.setState({canvasWidth: imgWidth, canvasHeight: imgHeight});\r\n  }\r\n\r\n  getExcelTitle = (data) => {\r\n    let titleArray = [];\r\n    for (var key in data[0])\r\n        titleArray.push(key);\r\n    this.updateExcelData(titleArray);\r\n    this.setState({excelTitleData: titleArray});\r\n  }\r\n\r\n  updateExcelData = (excelTitleData) => {\r\n    const {stage, imageUrl, canvasWidth, canvasHeight} = this.state;\r\n\r\n    if(imageUrl){\r\n      const layer = new Konva.Layer();\r\n      const bg = new Konva.Image({\r\n        x: 0,\r\n        y: 0,\r\n        image: imageUrl,\r\n        width: canvasWidth,\r\n        height: canvasHeight,\r\n      });\r\n      layer.add(bg);\r\n      layer.batchDraw();\r\n      stage.add(layer);\r\n    }\r\n\r\n    for (let i = 0; i < excelTitleData.length; i++){\r\n      this.addBox(stage, i, excelTitleData);\r\n    }\r\n  }*/\r\n\r\n  render() {\r\n      const {canvasHeight, canvasWidth} = this.props;\r\n    return (\r\n        <div className=\"container\" id=\"container\" style={{width: canvasWidth, height: canvasHeight}}>123</div>\r\n    );\r\n  }\r\n}\r\nexport default PreviewImg;","import React from 'react';\nimport XLSX from \"xlsx\";\nimport { Accordion, Card, Button } from 'react-bootstrap';\nimport InputFiles from \"react-input-files\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PreviewImg from './PreviewImg';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state ={\n      ratio: 2,\n      canvasWidth: 800, \n      canvasHeight: 600,\n      bgImg: null, \n      excelData: null,\n      excelTitleData: null,\n      excelHint: false,\n      bgImgHint: false\n    };\n  }\n\n  //匯入excel檔案\n  onImportExcel = files => {\n    const fileReader = new FileReader();\n    for (let index = 0; index < files.length; index++) {\n        fileReader.name = files[index].name;\n    }\n    fileReader.onload = event => {\n        try {\n            const validExts = [\".xlsx\", \".xls\"];\n            const fileExt = event.target.name;\n\n            const fileExtlastof = fileExt.substring(fileExt.lastIndexOf(\".\"));\n            if (validExts.indexOf(fileExtlastof) === -1) \n              throw new Error(\"檔案類型錯誤，只可接受：\" + validExts.toString() + \"檔案名稱\");\n\n            const { result } = event.target;\n            const workbook = XLSX.read(result, { type: \"binary\" });\n            let data = []; \n            for (const sheet in workbook.Sheets) {\n                if (workbook.Sheets.hasOwnProperty(sheet)) {\n                    data = data.concat(\n                        XLSX.utils.sheet_to_json(workbook.Sheets[sheet])\n                    );\n                }\n            }\n\n            if(data.length === 0) \n              throw new Error(\"excel沒有任何資料\");\n\n            this.setState({excelHint: false});\n            this.getExcelTitle(data);\n        } catch (e) {\n          alert(e);\n          return;\n        }\n    };\n    fileReader.readAsBinaryString(files[0]);\n  };\n\n  //取得excel欄位所有標題\n  getExcelTitle = (data) => {\n    let titleArray = [];\n    for (var key in data[0])\n        titleArray.push(key);\n    console.log(titleArray);\n    this.setState({excelData: data, excelTitleData: titleArray});\n  }\n\n  //匯入圖片檔案\n  handleImageChange = (e) => {\n    let reader = new FileReader();\n    let file = e.target.files[0];\n\n    reader.onloadend = () => {\n        const img = new window.Image();\n        img.onload = () => {\n          this.setState({bgImgHint: false});\n          console.log(\"loading\");\n        }\n        img.src = reader.result;\n        this.setState({bgImg: reader.result});\n    }\n    reader.readAsDataURL(file);\n  }\n\n  changeRatio = () => {\n    const value = document.getElementById(\"bgRatio\").value;\n    if(value === \"small\"){\n      this.setState({ratio: 2});\n    }else if(value === \"middle\"){\n      this.setState({ratio: 1.8});\n    }else if(value === \"big\"){\n      this.setState({ratio: 1.6});\n    }\n  }\n\n  download = () =>{\n    const {stage} = this.state;\n    const a = document.createElement('a');\n    const event = new MouseEvent('click');\n    a.download = 'test.jpg';\n    a.href = stage.toDataURL();\n    a.dispatchEvent(event);\n  }\n\n  updatePreviewImg = () => {\n    const {bgImg, excelData} = this.state;\n    if(!bgImg && !excelData){\n      alert(\"請上傳背景圖&excel檔案\");\n      this.setState({excelHint: true, bgImgHint: true});\n    }else if(!bgImg){\n      alert(\"請上傳背景圖\");\n      this.setState({bgImgHint: true});\n    }else if(!excelData){\n      alert(\"請上傳excel檔案\");\n      this.setState({excelHint: true});\n    }\n  }\n\n  render() {\n    const {canvasWidth, canvasHeight, excelHint, bgImgHint, ratio} = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"topBlock\">\n          <div className=\"topText\">excel2picture demo</div>\n        </div>\n        <div className=\"cotentBlock\">\n          <div className=\"uploadBlock\">\n            <div className=\"uploadBgBlock\" id=\"uploadBgBlock\">\n              <div style={{width: \"80%\", marginTop: \"20px\", fontFamily: \"sans-serif\"}}>\n              <Accordion defaultActiveKey=\"0\">\n                <Card>\n                  <Accordion.Toggle as={Card.Header} style={{fontWeight: \"bold\", color: \"#0066CC\"}} eventKey=\"0\">\n                    step 1 : 選擇預覽圖片大小\n                  </Accordion.Toggle>\n                  <Accordion.Collapse eventKey=\"0\">\n                    <Card.Body>\n                        <select id=\"bgRatio\" onChange={this.changeRatio}>\n                  　        <option value=\"small\">small</option>\n                  　        <option value=\"middle\">middle</option>\n                            <option value=\"big\">big</option>\n                        </select>\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n                <Card>\n                  <Accordion.Toggle as={Card.Header} style={{fontWeight: \"bold\", color: excelHint? \"red\":\"#0066CC\"}} eventKey=\"1\">\n                    step 2 : 上傳excel檔案\n                  </Accordion.Toggle>\n                  <Accordion.Collapse eventKey=\"1\">\n                    <Card.Body>\n                        <InputFiles accept=\".xlsx, .xls\" onChange={this.onImportExcel}>\n                            <button className=\"btn btn-primary\">上傳excel資料</button>\n                        </InputFiles>\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n                <Card>\n                  <Accordion.Toggle as={Card.Header} style={{fontWeight: \"bold\", color: bgImgHint? \"red\":\"#0066CC\"}} eventKey=\"2\">\n                    step 3 : 上傳背景圖片\n                  </Accordion.Toggle>\n                  <Accordion.Collapse eventKey=\"2\">\n                    <Card.Body>\n                    <label className=\"btn btn-primary\" style={{marginBottom: \"0\"}}>\n                        {\"上傳背景圖片\"}\n                        <input type=\"file\" style={{display: \"none\"}} onChange={this.handleImageChange} accept=\"image/*\"/>\n                    </label>\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n              <Button variant=\"info\" style={{width: \"100%\", marginTop: \"10px\"}} onClick={this.updatePreviewImg}>產生預覽結果</Button>{' '}\n              </div>\n              <PreviewImg canvasWidth={canvasWidth/ratio} canvasHeight={canvasHeight/ratio}/>\n            </div>\n            <div className=\"generateImageBlock\">\n              {\"請先選擇資料及圖片，並預覽結果\"}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}